{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nexport default {\n  name: 'DarijaLinguist',\n  setup() {\n    const words = ref([]);\n    const currentIndex = ref(0);\n    const loading = ref(false);\n    const error = ref(null);\n    const phoneticDialog = ref(false);\n    const suggestedPhonetic = ref('');\n    const isRecording = ref(false);\n    const audioUrl = ref('');\n    const feedback = ref('');\n    let mediaRecorder = null;\n    let audioChunks = [];\n    const fetchWords = async () => {\n      loading.value = true;\n      error.value = null;\n      try {\n        const response = await axios.get('http://localhost:5000/api/words');\n        words.value = response.data;\n      } catch (err) {\n        error.value = 'Failed to fetch words. Please try again.';\n        console.error('Error fetching words:', err);\n      } finally {\n        loading.value = false;\n      }\n    };\n    const currentWord = computed(() => words.value[currentIndex.value]);\n    const nextWord = () => {\n      currentIndex.value = (currentIndex.value + 1) % words.value.length;\n    };\n    const previousWord = () => {\n      currentIndex.value = (currentIndex.value - 1 + words.value.length) % words.value.length;\n    };\n    const speak = text => {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'ar-MA'; // Moroccan Arabic\n      speechSynthesis.speak(utterance);\n    };\n    const speakWord = () => {\n      if (currentWord.value) {\n        speak(currentWord.value.darija);\n      }\n    };\n    const speakExample = example => {\n      speak(example);\n    };\n    const openPhoneticDialog = () => {\n      suggestedPhonetic.value = currentWord.value ? currentWord.value.phonetic : '';\n      phoneticDialog.value = true;\n    };\n    const startRecording = async () => {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      isRecording.value = true;\n      audioChunks = [];\n      mediaRecorder.addEventListener(\"dataavailable\", event => {\n        audioChunks.push(event.data);\n      });\n      mediaRecorder.addEventListener(\"stop\", () => {\n        const audioBlob = new Blob(audioChunks);\n        audioUrl.value = URL.createObjectURL(audioBlob);\n        isRecording.value = false;\n      });\n    };\n    const stopRecording = () => {\n      mediaRecorder.stop();\n    };\n    const submitPhoneticSuggestion = async () => {\n      if (currentWord.value && suggestedPhonetic.value) {\n        try {\n          feedback.value = 'Submitting suggestion...';\n          console.log('Current word:', currentWord.value);\n          console.log('Suggestion data:', {\n            suggestedPhonetic: suggestedPhonetic.value,\n            audioUrl: audioUrl.value\n          });\n          const response = await axios.post(`http://localhost:5000/api/words/${currentWord.value._id}/phonetic-suggestion`, {\n            suggestedPhonetic: suggestedPhonetic.value,\n            audioUrl: audioUrl.value\n          });\n          console.log('Server response:', response.data);\n          feedback.value = 'Suggestion submitted successfully!';\n          setTimeout(() => {\n            phoneticDialog.value = false;\n            feedback.value = '';\n            suggestedPhonetic.value = '';\n            audioUrl.value = '';\n          }, 2000);\n        } catch (err) {\n          console.error('Error submitting phonetic suggestion:', err);\n          if (err.response) {\n            console.error('Response data:', err.response.data);\n            console.error('Response status:', err.response.status);\n            console.error('Response headers:', err.response.headers);\n          } else if (err.request) {\n            console.error('No response received:', err.request);\n          } else {\n            console.error('Error setting up request:', err.message);\n          }\n          feedback.value = `Error submitting suggestion: ${err.response ? err.response.data.message : err.message}`;\n        }\n      } else {\n        feedback.value = 'Please enter a suggested pronunciation.';\n      }\n    };\n    onMounted(fetchWords);\n    return {\n      currentWord,\n      nextWord,\n      previousWord,\n      speakWord,\n      speakExample,\n      loading,\n      error,\n      phoneticDialog,\n      suggestedPhonetic,\n      openPhoneticDialog,\n      submitPhoneticSuggestion,\n      startRecording,\n      stopRecording,\n      isRecording,\n      audioUrl,\n      feedback\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}