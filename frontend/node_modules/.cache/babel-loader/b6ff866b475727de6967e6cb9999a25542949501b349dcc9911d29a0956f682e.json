{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VExpansionPanelSymbol } from \"./shared.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\"; // Directives\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Utilities\nimport { computed, inject } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand'\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse'\n  },\n  hideActions: Boolean,\n  focusable: Boolean,\n  static: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false\n  },\n  readonly: Boolean,\n  ...makeComponentProps(),\n  ...makeDimensionProps()\n}, 'VExpansionPanelTitle');\nexport const VExpansionPanelTitle = genericComponent()({\n  name: 'VExpansionPanelTitle',\n  directives: {\n    Ripple\n  },\n  props: makeVExpansionPanelTitleProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel');\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'color');\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly\n    }));\n    const icon = computed(() => expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon);\n    useRender(() => _withDirectives(_createVNode(\"button\", {\n      \"class\": ['v-expansion-panel-title', {\n        'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n        'v-expansion-panel-title--focusable': props.focusable,\n        'v-expansion-panel-title--static': props.static\n      }, backgroundColorClasses.value, props.class],\n      \"style\": [backgroundColorStyles.value, dimensionStyles.value, props.style],\n      \"type\": \"button\",\n      \"tabindex\": expansionPanel.disabled.value ? -1 : undefined,\n      \"disabled\": expansionPanel.disabled.value,\n      \"aria-expanded\": expansionPanel.isSelected.value,\n      \"onClick\": !props.readonly ? expansionPanel.toggle : undefined\n    }, [_createVNode(\"span\", {\n      \"class\": \"v-expansion-panel-title__overlay\"\n    }, null), slots.default?.(slotProps.value), !props.hideActions && _createVNode(VDefaultsProvider, {\n      \"defaults\": {\n        VIcon: {\n          icon: icon.value\n        }\n      }\n    }, {\n      default: () => [_createVNode(\"span\", {\n        \"class\": \"v-expansion-panel-title__icon\"\n      }, [slots.actions?.(slotProps.value) ?? _createVNode(VIcon, null, null)])]\n    })]), [[_resolveDirective(\"ripple\"), props.ripple]]));\n    return {};\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}