{"ast":null,"code":"import { withDirectives as _withDirectives, createVNode as _createVNode, vShow as _vShow } from \"vue\";\n// Styles\nimport \"./VCounter.css\";\n\n// Components\nimport { VSlideYTransition } from \"../transitions/index.mjs\"; // Composables\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\"; // Utilities\nimport { computed } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVCounterProps = propsFactory({\n  active: Boolean,\n  disabled: Boolean,\n  max: [Number, String],\n  value: {\n    type: [Number, String],\n    default: 0\n  },\n  ...makeComponentProps(),\n  ...makeTransitionProps({\n    transition: {\n      component: VSlideYTransition\n    }\n  })\n}, 'VCounter');\nexport const VCounter = genericComponent()({\n  name: 'VCounter',\n  functional: true,\n  props: makeVCounterProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const counter = computed(() => {\n      return props.max ? `${props.value} / ${props.max}` : String(props.value);\n    });\n    useRender(() => _createVNode(MaybeTransition, {\n      \"transition\": props.transition\n    }, {\n      default: () => [_withDirectives(_createVNode(\"div\", {\n        \"class\": ['v-counter', {\n          'text-error': props.max && !props.disabled && parseFloat(props.value) > parseFloat(props.max)\n        }, props.class],\n        \"style\": props.style\n      }, [slots.default ? slots.default({\n        counter: counter.value,\n        max: props.max,\n        value: props.value\n      }) : counter.value]), [[_vShow, props.active]])]\n    }));\n    return {};\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}