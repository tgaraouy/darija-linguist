{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"text-h4 mb-4\"\n}, \"Quiz Mode\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_radio = _resolveComponent(\"v-radio\");\n  const _component_v_radio_group = _resolveComponent(\"v-radio-group\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_card_actions = _resolveComponent(\"v-card-actions\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_alert = _resolveComponent(\"v-alert\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $setup.currentQuestion ? (_openBlock(), _createBlock(_component_v_card, {\n    key: 0\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_card_title, null, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.currentQuestion.question), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_v_card_text, null, {\n      default: _withCtx(() => [_createVNode(_component_v_radio_group, {\n        modelValue: $setup.selectedAnswer,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedAnswer = $event)\n      }, {\n        default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.currentQuestion.options, option => {\n          return _openBlock(), _createBlock(_component_v_radio, {\n            key: option,\n            label: option,\n            value: option\n          }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n        }), 128 /* KEYED_FRAGMENT */))]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_v_card_actions, null, {\n      default: _withCtx(() => [_createVNode(_component_v_btn, {\n        onClick: $setup.checkAnswer,\n        disabled: !$setup.selectedAnswer\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"Submit\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\", \"disabled\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })) : _createCommentVNode(\"v-if\", true), $setup.feedback ? (_openBlock(), _createBlock(_component_v_alert, {\n    key: 1,\n    type: $setup.feedbackType,\n    class: \"mt-4\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.feedback), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"type\"])) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_btn, {\n    onClick: $setup.nextQuestion,\n    class: \"mt-4\",\n    disabled: !$setup.answered\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Next Question\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\", \"disabled\"]), _createElementVNode(\"p\", _hoisted_2, \"Score: \" + _toDisplayString($setup.score) + \" / \" + _toDisplayString($setup.totalQuestions), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_hoisted_1","$setup","currentQuestion","_createBlock","_component_v_card","key","default","_withCtx","_createVNode","_component_v_card_title","_createTextVNode","_toDisplayString","question","_","_component_v_card_text","_component_v_radio_group","modelValue","selectedAnswer","_cache","$event","_Fragment","_renderList","options","option","_component_v_radio","label","value","_component_v_card_actions","_component_v_btn","onClick","checkAnswer","disabled","_createCommentVNode","feedback","_component_v_alert","type","feedbackType","nextQuestion","answered","_hoisted_2","score","totalQuestions"],"sources":["C:\\darija-linguist\\frontend\\src\\components\\QuizMode.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2 class=\"text-h4 mb-4\">Quiz Mode</h2>\r\n      <v-card v-if=\"currentQuestion\">\r\n        <v-card-title>{{ currentQuestion.question }}</v-card-title>\r\n        <v-card-text>\r\n          <v-radio-group v-model=\"selectedAnswer\">\r\n            <v-radio\r\n              v-for=\"option in currentQuestion.options\"\r\n              :key=\"option\"\r\n              :label=\"option\"\r\n              :value=\"option\"\r\n            ></v-radio>\r\n          </v-radio-group>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-btn @click=\"checkAnswer\" :disabled=\"!selectedAnswer\">Submit</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n      <v-alert v-if=\"feedback\" :type=\"feedbackType\" class=\"mt-4\">\r\n        {{ feedback }}\r\n      </v-alert>\r\n      <v-btn @click=\"nextQuestion\" class=\"mt-4\" :disabled=\"!answered\">Next Question</v-btn>\r\n      <p class=\"mt-4\">Score: {{ score }} / {{ totalQuestions }}</p>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, computed } from 'vue';\r\n  \r\n  export default {\r\n    name: 'QuizMode',\r\n    props: {\r\n      words: {\r\n        type: Array,\r\n        required: true,\r\n      },\r\n    },\r\n    setup(props) {\r\n      const currentQuestionIndex = ref(0);\r\n      const selectedAnswer = ref('');\r\n      const score = ref(0);\r\n      const feedback = ref('');\r\n      const feedbackType = ref('');\r\n      const answered = ref(false);\r\n  \r\n      const shuffleArray = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n      };\r\n  \r\n      const generateQuestion = (word) => {\r\n        const questionTypes = [\r\n          { question: `What is the phonetic pronunciation of \"${word.darija}\"?`, answer: word.phonetic },\r\n          { question: `What is the MSA equivalent of \"${word.darija}\"?`, answer: word.msaEquivalent },\r\n          { question: `Which region is \"${word.darija}\" commonly used in?`, answer: word.region },\r\n        ];\r\n        const questionType = questionTypes[Math.floor(Math.random() * questionTypes.length)];\r\n        const correctAnswer = questionType.answer;\r\n        const options = [correctAnswer];\r\n        \r\n        while (options.length < 4) {\r\n          const randomWord = props.words[Math.floor(Math.random() * props.words.length)];\r\n          const randomAnswer = randomWord[questionType.answer.toLowerCase()];\r\n          if (!options.includes(randomAnswer)) {\r\n            options.push(randomAnswer);\r\n          }\r\n        }\r\n  \r\n        return {\r\n          question: questionType.question,\r\n          options: shuffleArray(options),\r\n          correctAnswer,\r\n        };\r\n      };\r\n  \r\n      const questions = computed(() => props.words.map(generateQuestion));\r\n  \r\n      const currentQuestion = computed(() => questions.value[currentQuestionIndex.value]);\r\n  \r\n      const totalQuestions = computed(() => questions.value.length);\r\n  \r\n      const checkAnswer = () => {\r\n        if (selectedAnswer.value === currentQuestion.value.correctAnswer) {\r\n          score.value++;\r\n          feedback.value = 'Correct!';\r\n          feedbackType.value = 'success';\r\n        } else {\r\n          feedback.value = `Incorrect. The correct answer is: ${currentQuestion.value.correctAnswer}`;\r\n          feedbackType.value = 'error';\r\n        }\r\n        answered.value = true;\r\n      };\r\n  \r\n      const nextQuestion = () => {\r\n        currentQuestionIndex.value++;\r\n        selectedAnswer.value = '';\r\n        feedback.value = '';\r\n        answered.value = false;\r\n      };\r\n  \r\n      return {\r\n        currentQuestion,\r\n        selectedAnswer,\r\n        score,\r\n        totalQuestions,\r\n        feedback,\r\n        feedbackType,\r\n        answered,\r\n        checkAnswer,\r\n        nextQuestion,\r\n      };\r\n    },\r\n  };\r\n  </script>"],"mappings":";gCAEMA,mBAAA,CAAuC;EAAnCC,KAAK,EAAC;AAAc,GAAC,WAAS;;EAqB/BA,KAAK,EAAC;AAAM;;;;;;;;;;uBAtBjBC,mBAAA,CAuBM,cAtBJC,UAAuC,EACzBC,MAAA,CAAAC,eAAe,I,cAA7BC,YAAA,CAeSC,iBAAA;IAlBfC,GAAA;EAAA;IAAAC,OAAA,EAAAC,QAAA,CAIQ,MAA2D,CAA3DC,YAAA,CAA2DC,uBAAA;MAJnEH,OAAA,EAAAC,QAAA,CAIsB,MAA8B,CAJpDG,gBAAA,CAAAC,gBAAA,CAIyBV,MAAA,CAAAC,eAAe,CAACU,QAAQ,iB;MAJjDC,CAAA;QAKQL,YAAA,CAScM,sBAAA;MAdtBR,OAAA,EAAAC,QAAA,CAMU,MAOgB,CAPhBC,YAAA,CAOgBO,wBAAA;QAb1BC,UAAA,EAMkCf,MAAA,CAAAgB,cAAc;QANhD,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMkClB,MAAA,CAAAgB,cAAc,GAAAE,MAAA;;QANhDb,OAAA,EAAAC,QAAA,CAQc,MAAyC,E,kBAD3CR,mBAAA,CAKWqB,SAAA,QAZvBC,WAAA,CAQ+BpB,MAAA,CAAAC,eAAe,CAACoB,OAAO,EAAjCC,MAAM;+BADfpB,YAAA,CAKWqB,kBAAA;YAHRnB,GAAG,EAAEkB,MAAM;YACXE,KAAK,EAAEF,MAAM;YACbG,KAAK,EAAEH;;;QAXtBV,CAAA;;MAAAA,CAAA;QAeQL,YAAA,CAEiBmB,yBAAA;MAjBzBrB,OAAA,EAAAC,QAAA,CAgBU,MAAsE,CAAtEC,YAAA,CAAsEoB,gBAAA;QAA9DC,OAAK,EAAE5B,MAAA,CAAA6B,WAAW;QAAGC,QAAQ,GAAG9B,MAAA,CAAAgB;;QAhBlDX,OAAA,EAAAC,QAAA,CAgBkE,MAAM,CAhBxEG,gBAAA,CAgBkE,QAAM,E;QAhBxEG,CAAA;;MAAAA,CAAA;;IAAAA,CAAA;QAAAmB,mBAAA,gBAmBqB/B,MAAA,CAAAgC,QAAQ,I,cAAvB9B,YAAA,CAEU+B,kBAAA;IArBhB7B,GAAA;IAmBgC8B,IAAI,EAAElC,MAAA,CAAAmC,YAAY;IAAEtC,KAAK,EAAC;;IAnB1DQ,OAAA,EAAAC,QAAA,CAoBQ,MAAc,CApBtBG,gBAAA,CAAAC,gBAAA,CAoBWV,MAAA,CAAAgC,QAAQ,iB;IApBnBpB,CAAA;iCAAAmB,mBAAA,gBAsBMxB,YAAA,CAAqFoB,gBAAA;IAA7EC,OAAK,EAAE5B,MAAA,CAAAoC,YAAY;IAAEvC,KAAK,EAAC,MAAM;IAAEiC,QAAQ,GAAG9B,MAAA,CAAAqC;;IAtB5DhC,OAAA,EAAAC,QAAA,CAsBsE,MAAa,CAtBnFG,gBAAA,CAsBsE,eAAa,E;IAtBnFG,CAAA;8CAuBMhB,mBAAA,CAA6D,KAA7D0C,UAA6D,EAA7C,SAAO,GAAA5B,gBAAA,CAAGV,MAAA,CAAAuC,KAAK,IAAG,KAAG,GAAA7B,gBAAA,CAAGV,MAAA,CAAAwC,cAAc,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}