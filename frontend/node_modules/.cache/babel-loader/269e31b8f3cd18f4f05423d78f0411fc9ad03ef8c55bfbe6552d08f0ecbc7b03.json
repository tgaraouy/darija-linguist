{"ast":null,"code":"/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue';\nimport { wrapInArray } from \"../../util/index.mjs\";\nexport const independentActiveStrategy = mandatory => {\n  const strategy = {\n    activate: _ref => {\n      let {\n        id,\n        value,\n        activated\n      } = _ref;\n      id = toRaw(id);\n\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value && activated.size === 1 && activated.has(id)) return activated;\n      if (value) {\n        activated.add(id);\n      } else {\n        activated.delete(id);\n      }\n      return activated;\n    },\n    in: (v, children, parents) => {\n      let set = new Set();\n      if (v != null) {\n        for (const id of wrapInArray(v)) {\n          set = strategy.activate({\n            id,\n            value: true,\n            activated: new Set(set),\n            children,\n            parents\n          });\n        }\n      }\n      return set;\n    },\n    out: v => {\n      return Array.from(v);\n    }\n  };\n  return strategy;\n};\nexport const independentSingleActiveStrategy = mandatory => {\n  const parentStrategy = independentActiveStrategy(mandatory);\n  const strategy = {\n    activate: _ref2 => {\n      let {\n        activated,\n        id,\n        ...rest\n      } = _ref2;\n      id = toRaw(id);\n      const singleSelected = activated.has(id) ? new Set([id]) : new Set();\n      return parentStrategy.activate({\n        ...rest,\n        id,\n        activated: singleSelected\n      });\n    },\n    in: (v, children, parents) => {\n      let set = new Set();\n      if (v != null) {\n        const arr = wrapInArray(v);\n        if (arr.length) {\n          set = parentStrategy.in(arr.slice(0, 1), children, parents);\n        }\n      }\n      return set;\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport const leafActiveStrategy = mandatory => {\n  const parentStrategy = independentActiveStrategy(mandatory);\n  const strategy = {\n    activate: _ref3 => {\n      let {\n        id,\n        activated,\n        children,\n        ...rest\n      } = _ref3;\n      id = toRaw(id);\n      if (children.has(id)) return activated;\n      return parentStrategy.activate({\n        id,\n        activated,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const leafSingleActiveStrategy = mandatory => {\n  const parentStrategy = independentSingleActiveStrategy(mandatory);\n  const strategy = {\n    activate: _ref4 => {\n      let {\n        id,\n        activated,\n        children,\n        ...rest\n      } = _ref4;\n      id = toRaw(id);\n      if (children.has(id)) return activated;\n      return parentStrategy.activate({\n        id,\n        activated,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}