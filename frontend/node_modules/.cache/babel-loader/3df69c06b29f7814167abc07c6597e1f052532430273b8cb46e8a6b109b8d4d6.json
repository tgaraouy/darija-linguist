{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed } from 'vue';\nexport default {\n  name: 'QuizMode',\n  props: {\n    words: {\n      type: Array,\n      required: true\n    }\n  },\n  setup(props) {\n    const currentQuestionIndex = ref(0);\n    const selectedAnswer = ref('');\n    const score = ref(0);\n    const feedback = ref('');\n    const feedbackType = ref('');\n    const answered = ref(false);\n    const shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    };\n    const generateQuestion = word => {\n      const questionTypes = [{\n        question: `What is the phonetic pronunciation of \"${word.darija}\"?`,\n        answer: word.phonetic\n      }, {\n        question: `What is the MSA equivalent of \"${word.darija}\"?`,\n        answer: word.msaEquivalent\n      }, {\n        question: `Which region is \"${word.darija}\" commonly used in?`,\n        answer: word.region\n      }];\n      const questionType = questionTypes[Math.floor(Math.random() * questionTypes.length)];\n      const correctAnswer = questionType.answer;\n      const options = [correctAnswer];\n      while (options.length < 4) {\n        const randomWord = props.words[Math.floor(Math.random() * props.words.length)];\n        const randomAnswer = randomWord[questionType.answer.toLowerCase()];\n        if (!options.includes(randomAnswer)) {\n          options.push(randomAnswer);\n        }\n      }\n      return {\n        question: questionType.question,\n        options: shuffleArray(options),\n        correctAnswer\n      };\n    };\n    const questions = computed(() => props.words.map(generateQuestion));\n    const currentQuestion = computed(() => questions.value[currentQuestionIndex.value]);\n    const totalQuestions = computed(() => questions.value.length);\n    const checkAnswer = () => {\n      if (selectedAnswer.value === currentQuestion.value.correctAnswer) {\n        score.value++;\n        feedback.value = 'Correct!';\n        feedbackType.value = 'success';\n      } else {\n        feedback.value = `Incorrect. The correct answer is: ${currentQuestion.value.correctAnswer}`;\n        feedbackType.value = 'error';\n      }\n      answered.value = true;\n    };\n    const nextQuestion = () => {\n      currentQuestionIndex.value++;\n      selectedAnswer.value = '';\n      feedback.value = '';\n      answered.value = false;\n    };\n    return {\n      currentQuestion,\n      selectedAnswer,\n      score,\n      totalQuestions,\n      feedback,\n      feedbackType,\n      answered,\n      checkAnswer,\n      nextQuestion\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","name","props","words","type","Array","required","setup","currentQuestionIndex","selectedAnswer","score","feedback","feedbackType","answered","shuffleArray","array","i","length","j","Math","floor","random","generateQuestion","word","questionTypes","question","darija","answer","phonetic","msaEquivalent","region","questionType","correctAnswer","options","randomWord","randomAnswer","toLowerCase","includes","push","questions","map","currentQuestion","value","totalQuestions","checkAnswer","nextQuestion"],"sources":["C:\\darija-linguist\\frontend\\src\\components\\QuizMode.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2 class=\"text-h4 mb-4\">Quiz Mode</h2>\r\n      <v-card v-if=\"currentQuestion\">\r\n        <v-card-title>{{ currentQuestion.question }}</v-card-title>\r\n        <v-card-text>\r\n          <v-radio-group v-model=\"selectedAnswer\">\r\n            <v-radio\r\n              v-for=\"option in currentQuestion.options\"\r\n              :key=\"option\"\r\n              :label=\"option\"\r\n              :value=\"option\"\r\n            ></v-radio>\r\n          </v-radio-group>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-btn @click=\"checkAnswer\" :disabled=\"!selectedAnswer\">Submit</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n      <v-alert v-if=\"feedback\" :type=\"feedbackType\" class=\"mt-4\">\r\n        {{ feedback }}\r\n      </v-alert>\r\n      <v-btn @click=\"nextQuestion\" class=\"mt-4\" :disabled=\"!answered\">Next Question</v-btn>\r\n      <p class=\"mt-4\">Score: {{ score }} / {{ totalQuestions }}</p>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, computed } from 'vue';\r\n  \r\n  export default {\r\n    name: 'QuizMode',\r\n    props: {\r\n      words: {\r\n        type: Array,\r\n        required: true,\r\n      },\r\n    },\r\n    setup(props) {\r\n      const currentQuestionIndex = ref(0);\r\n      const selectedAnswer = ref('');\r\n      const score = ref(0);\r\n      const feedback = ref('');\r\n      const feedbackType = ref('');\r\n      const answered = ref(false);\r\n  \r\n      const shuffleArray = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n      };\r\n  \r\n      const generateQuestion = (word) => {\r\n        const questionTypes = [\r\n          { question: `What is the phonetic pronunciation of \"${word.darija}\"?`, answer: word.phonetic },\r\n          { question: `What is the MSA equivalent of \"${word.darija}\"?`, answer: word.msaEquivalent },\r\n          { question: `Which region is \"${word.darija}\" commonly used in?`, answer: word.region },\r\n        ];\r\n        const questionType = questionTypes[Math.floor(Math.random() * questionTypes.length)];\r\n        const correctAnswer = questionType.answer;\r\n        const options = [correctAnswer];\r\n        \r\n        while (options.length < 4) {\r\n          const randomWord = props.words[Math.floor(Math.random() * props.words.length)];\r\n          const randomAnswer = randomWord[questionType.answer.toLowerCase()];\r\n          if (!options.includes(randomAnswer)) {\r\n            options.push(randomAnswer);\r\n          }\r\n        }\r\n  \r\n        return {\r\n          question: questionType.question,\r\n          options: shuffleArray(options),\r\n          correctAnswer,\r\n        };\r\n      };\r\n  \r\n      const questions = computed(() => props.words.map(generateQuestion));\r\n  \r\n      const currentQuestion = computed(() => questions.value[currentQuestionIndex.value]);\r\n  \r\n      const totalQuestions = computed(() => questions.value.length);\r\n  \r\n      const checkAnswer = () => {\r\n        if (selectedAnswer.value === currentQuestion.value.correctAnswer) {\r\n          score.value++;\r\n          feedback.value = 'Correct!';\r\n          feedbackType.value = 'success';\r\n        } else {\r\n          feedback.value = `Incorrect. The correct answer is: ${currentQuestion.value.correctAnswer}`;\r\n          feedbackType.value = 'error';\r\n        }\r\n        answered.value = true;\r\n      };\r\n  \r\n      const nextQuestion = () => {\r\n        currentQuestionIndex.value++;\r\n        selectedAnswer.value = '';\r\n        feedback.value = '';\r\n        answered.value = false;\r\n      };\r\n  \r\n      return {\r\n        currentQuestion,\r\n        selectedAnswer,\r\n        score,\r\n        totalQuestions,\r\n        feedback,\r\n        feedbackType,\r\n        answered,\r\n        checkAnswer,\r\n        nextQuestion,\r\n      };\r\n    },\r\n  };\r\n  </script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}